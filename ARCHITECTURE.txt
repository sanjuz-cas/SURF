# SURF System Architecture Diagram
# =================================

"""
┌─────────────────────────────────────────────────────────────────────────────┐
│                     🌊 SURF CUSTOMER FEEDBACK AGENT                         │
│                  Strategic User Retention & Feedback System                 │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  INPUT SOURCES                                                              │
├─────────────────────────────────────────────────────────────────────────────┤
│  📧 Email  │  💬 Slack  │  📝 Notion  │  📊 Survey  │  🌐 Web Forms       │
└──────┬──────┴─────┬─────┴──────┬──────┴──────┬──────┴───────┬─────────────┘
       │            │            │             │              │
       └────────────┴────────────┴─────────────┴──────────────┘
                                  │
                                  ▼
         ┌────────────────────────────────────────────────┐
         │         PostgreSQL Database                    │
         │  ┌──────────────────────────────────────────┐ │
         │  │  raw_feedback Table                      │ │
         │  │  • id, raw_text, source                  │ │
         │  │  • category, severity_volume_score       │ │
         │  │  • metadata (JSONB), timestamps          │ │
         │  └──────────────────────────────────────────┘ │
         └────────────────────────────────────────────────┘
                                  │
                    ┌─────────────┴─────────────┐
                    │    PostgresTool (Custom)  │
                    │  • read_top_items()       │
                    │  • update_item_score()    │
                    │  • get_unprocessed()      │
                    └─────────────┬─────────────┘
                                  │
                                  ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│                        5-AGENT CREWAI PIPELINE                              │
│                         (Sequential Execution)                              │
└─────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────────┐
│  AGENT 1: IngestorAgent                                                   │
│  ─────────────────────────────────────────────────────────────────────────│
│  Role: Data Unification Specialist                                        │
│  Task: • Retrieve all raw feedback from PostgreSQL                        │
│        • Verify data integrity and consistency                            │
│        • Count items and log summary                                      │
│  Tools: [PostgresTool]                                                    │
│  Output: {total_items: 10, sources: [...], status: "ready_for_analysis"} │
└───────────────────────────────┬───────────────────────────────────────────┘
                                │
                                ▼
┌───────────────────────────────────────────────────────────────────────────┐
│  AGENT 2: AnalyzerAgent                                                   │
│  ─────────────────────────────────────────────────────────────────────────│
│  Role: Category & Score Analyst                                           │
│  Task: • Read unprocessed feedback (10 items)                             │
│        • Categorize: Bug / Feature / UX / Other                           │
│        • Calculate Severity-Volume Score (0.0-10.0)                       │
│        • Update database with category + score                            │
│  Scoring Logic:                                                           │
│    - Security issues: 9-10                                                │
│    - Enterprise customer bugs: 7-10                                       │
│    - Performance degradation: 7-9                                         │
│    - UX problems: 4-6                                                     │
│    - Feature requests: 3-8                                                │
│  Modifiers: +2 (Enterprise), +1 (Pro), +2 (critical urgency)             │
│  Tools: [PostgresTool]                                                    │
│  Output: {total_analyzed: 10, avg_score: 6.5, top_3_scores: [9.0, ...]}  │
└───────────────────────────────┬───────────────────────────────────────────┘
                                │
                                ▼
┌───────────────────────────────────────────────────────────────────────────┐
│  AGENT 3: PrioritizerAgent                                                │
│  ─────────────────────────────────────────────────────────────────────────│
│  Role: Strategic Product Manager                                          │
│  Task: • Retrieve top 3 items by score from database                      │
│        • Generate comprehensive action plan for each:                     │
│          - title (concise, < 100 chars)                                   │
│          - team (Engineering/Product/UX/Support)                          │
│          - immediate_action (what to do first)                            │
│          - timeline (estimated completion)                                │
│          - success_metric (how to measure success)                        │
│          - dependencies (required resources)                              │
│        • Rank items 1-3 by priority                                       │
│  Tools: [PostgresTool]                                                    │
│  Output: {top_3_items: [{id, title, score, team, action_plan}, ...]}     │
└───────────────────────────────┬───────────────────────────────────────────┘
                                │
                                ▼
┌───────────────────────────────────────────────────────────────────────────┐
│  AGENT 4: RetentionCriticAgent (LLM Financial Analyst)                    │
│  ─────────────────────────────────────────────────────────────────────────│
│  Role: 90-Day Financial Risk Assessor                                     │
│  Task: • Pre-mortem analysis: "What if we IGNORE this for 90 days?"      │
│        • For EACH of top 3 items, calculate:                              │
│          1. Customer churn risk (% + $ ARR loss)                          │
│          2. Revenue impact from lost new deals                            │
│          3. Support cost increases                                        │
│          4. Brand/reputation damage                                       │
│        • Output as string: "pre_mortem_forecast"                          │
│  Benchmarks:                                                              │
│    - Enterprise LTV: $100K-$500K/year                                     │
│    - Pro LTV: $10K-$50K/year                                              │
│    - Security issue churn: 30-50%                                         │
│    - Performance issue impact: 10-15%                                     │
│  Tools: [] (Pure analytical agent, no tools)                              │
│  Output: {items with added pre_mortem_forecast: "$1.8M-$2.3M loss..."}    │
└───────────────────────────────┬───────────────────────────────────────────┘
                                │
                                ▼
┌───────────────────────────────────────────────────────────────────────────┐
│  AGENT 5: DelivererAgent                                                  │
│  ─────────────────────────────────────────────────────────────────────────│
│  Role: Workflow Automation & Delivery Specialist                          │
│  Task: • Format final prioritized list as professional JSON               │
│        • Include all fields: rank, title, category, score, team,          │
│          pre_mortem_forecast, action_plan                                 │
│        • Post to Slack with rich formatting (blocks)                      │
│        • Log delivery status and timestamp                                │
│  Tools: [PostToSlackTool]                                                 │
│  Output: {slack_delivery_status: "success", final_payload: {...}}        │
└───────────────────────────────┬───────────────────────────────────────────┘
                                │
                                ▼
         ┌────────────────────────────────────────────────┐
         │    PostgreSQL Database (Updated)               │
         │  ┌──────────────────────────────────────────┐ │
         │  │  prioritized_output Table                │ │
         │  │  • feedback_id, title, score             │ │
         │  │  • pre_mortem_forecast, team             │ │
         │  │  • action_plan (JSONB)                   │ │
         │  │  • slack_delivered, slack_delivered_at   │ │
         │  └──────────────────────────────────────────┘ │
         └────────────────────────────────────────────────┘
                                  │
                                  ▼
         ┌────────────────────────────────────────────────┐
         │         Slack Channel Delivery                 │
         │  ┌──────────────────────────────────────────┐ │
         │  │  📨 #customer-feedback                   │ │
         │  │  ─────────────────────────────────────── │ │
         │  │  🚨 SURF: Top Priority Customer Feedback │ │
         │  │                                          │ │
         │  │  #1 - API Response Time Degradation      │ │
         │  │  Category: Bug | Score: 9.00             │ │
         │  │  Team: Engineering                       │ │
         │  │                                          │ │
         │  │  💰 Financial Risk:                      │ │
         │  │  $1.8M-$2.3M loss over 90 days           │ │
         │  │  [... full details ...]                  │ │
         │  └──────────────────────────────────────────┘ │
         └────────────────────────────────────────────────┘
                                  │
                    ┌─────────────┴─────────────┐
                    │    Fallback: Local Log    │
                    │  (If Slack unavailable)   │
                    │  logs/surf_execution.log  │
                    └───────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  TECHNICAL COMPONENTS                                                       │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  ┌───────────────────┐  ┌───────────────────┐  ┌────────────────────────┐ │
│  │  backend/         │  │  db/              │  │  Configuration         │ │
│  │  ──────────────── │  │  ──────────────── │  │  ───────────────────── │ │
│  │  • main.py        │  │  • init_schema.sql│  │  • .env (secrets)      │ │
│  │  • agents/        │  │  • migrations/    │  │  • .env.example        │ │
│  │  • tasks/         │  │                   │  │  • requirements.txt    │ │
│  │  • tools/         │  │  Connection Pool: │  │                        │ │
│  │  • db_connection  │  │  • psycopg2       │  │  Dependencies:         │ │
│  │  • orchestrator   │  │  • SQLAlchemy     │  │  • crewai==0.41.1      │ │
│  └───────────────────┘  └───────────────────┘  │  • langchain==0.1.20   │ │
│                                                 │  • psycopg2-binary     │ │
│  ┌───────────────────┐  ┌───────────────────┐  │  • slack-sdk==3.27.2   │ │
│  │  Logging          │  │  Execution        │  │  • openai==1.35.0      │ │
│  │  ──────────────── │  │  ──────────────── │  └────────────────────────┘ │
│  │  • logs/ dir      │  │  • setup.py       │                             │
│  │  • Timestamped    │  │  • run.ps1 / .sh  │                             │
│  │  • DEBUG/INFO     │  │  • --dry-run      │                             │
│  │  • ERROR levels   │  │  • --verbose      │                             │
│  └───────────────────┘  └───────────────────┘                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  DATA FLOW SUMMARY                                                          │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  1. Raw Feedback → PostgreSQL (raw_feedback table)                          │
│  2. IngestorAgent → Retrieves all feedback                                  │
│  3. AnalyzerAgent → Scores & categorizes → Updates database                 │
│  4. PrioritizerAgent → Selects top 3 → Generates action plans               │
│  5. RetentionCriticAgent → Financial risk analysis → Adds forecasts         │
│  6. DelivererAgent → Formats report → Posts to Slack                        │
│  7. Final Output → Saved to prioritized_output table                        │
│                                                                             │
│  Total Processing Time: ~2-5 minutes (depends on LLM response times)        │
│  Sequential Execution: Each agent waits for previous agent to complete      │
│  Error Handling: Comprehensive try-catch with fallbacks                     │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│  KEY METRICS & BENCHMARKS                                                   │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                             │
│  Scoring:          0.0 (Low) ───────────────────────────── 10.0 (Critical)  │
│                    │           │           │           │           │        │
│                   Low      Low-Medium   Medium    High     Critical         │
│                                                                             │
│  Categories:       Bug (50%) │ Feature (25%) │ UX (20%) │ Other (5%)       │
│                                                                             │
│  Financial Risk:   Enterprise: $100K-$500K/year                             │
│                    Pro: $10K-$50K/year                                      │
│                    Free: $0 (limited support)                               │
│                                                                             │
│  Churn Benchmarks: Security issues: 30-50% enterprise churn                 │
│                    Performance: 10-15% impact                               │
│                    UX issues: 5-10% impact                                  │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘

                     🎉 SURF System Architecture Complete!
"""
